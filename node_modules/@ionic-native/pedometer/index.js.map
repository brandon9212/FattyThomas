{"version":3,"sources":["../../../src/@ionic-native/plugins/pedometer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAc3C;;;;;;;;;;;;;;;;;;;GAmBG;AASH;IAA+B,6BAAiB;IAAhD;;IAkEA,CAAC;IAhEC;;;OAGG;IAEH,2CAAuB,GAAvB,cAA8C,MAAM,CAAC,CAAC,CAAC;IAEvD;;;;;OAKG;IAEH,uCAAmB,GAAnB,cAA0C,MAAM,CAAC,CAAC,CAAC;IAEnD;;;;;OAKG;IAEH,4CAAwB,GAAxB,cAA+C,MAAM,CAAC,CAAC,CAAC;IAExD;;;;;;MAME;IAKF,yCAAqB,GAArB,cAAsD,MAAM,CAAC,CAAC,CAAC;IAE/D;;;OAGG;IAEH,wCAAoB,GAApB,cAAuC,MAAM,CAAC,CAAC,CAAC;IAEhD;;;;;;;OAOG;IAIH,6BAAS,GAAT,UAAU,OAA2C,IAA6B,MAAM,CAAC,CAAC,CAAC;IAEtF,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1DA;QADC,OAAO,EAAE;;;;4DAC6C;IASvD;QADC,OAAO,EAAE;;;;wDACyC;IASnD;QADC,OAAO,EAAE;;;;6DAC8C;IAaxD;QAJC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,sBAAsB;SACtC,CAAC;;;wCACuB,UAAU;0DAA4B;IAO/D;QADC,OAAO,EAAE;;;;yDACsC;IAahD;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;8CACyF;IA1DhF,SAAS;QARrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,WAAW;YACtB,IAAI,EAAE,yDAAyD;YAC/D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,SAAS,CAkErB;IAAD,gBAAC;CAlED,AAkEC,CAlE8B,iBAAiB,GAkE/C;SAlEY,SAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Interface of a pedometer data object which is returned by watching for new data or by recieving historical data\r\n */\r\nexport interface IPedometerData {\r\n  startDate?: number;\r\n  endDate?: number;\r\n  numberOfSteps: number;\r\n  distance: number;\r\n  floorsAscended: number;\r\n  floorsDescended: number;\r\n}\r\n\r\n/**\r\n * @name Pedometer\r\n * @description\r\n * Fetch pedestrian-related pedometer data,\r\n * such as step counts and other information about the distance travelled.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Pedometer } from '@ionic-native/pedometer';\r\n *\r\n * Pedometer.isDistanceAvailable()\r\n *   .then((available: boolean) => console.log(available))\r\n *   .catch((error: any) => console.log(error));\r\n *\r\n * Pedometer.startPedometerUpdates()\r\n *    .subscribe((data: IPedometerData) => {\r\n *      console.log(data);\r\n *    });\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Pedometer',\r\n  plugin: 'cordova-plugin-pedometer',\r\n  pluginRef: 'pedometer',\r\n  repo: 'https://github.com/leecrossley/cordova-plugin-pedometer',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class Pedometer extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Checks if step counting is available. Only works on iOS.\r\n   * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\r\n   */\r\n  @Cordova()\r\n  isStepCountingAvailable(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Distance estimation indicates the ability to use step information to supply the approximate distance travelled by the user.\r\n   * This capability is not supported on all devices, even with iOS 8.\r\n   * Only works on iOS.\r\n   * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\r\n   */\r\n  @Cordova()\r\n  isDistanceAvailable(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Floor counting indicates the ability to count the number of floors the user walks up or down using stairs.\r\n   * This capability is not supported on all devices, even with iOS 8.\r\n   * Only works on iOS.\r\n   * @return {Promise<boolean>} Returns a promise that resolves when feature is supported (true) or not supported (false)\r\n   */\r\n  @Cordova()\r\n  isFloorCountingAvailable(): Promise<boolean> { return; }\r\n\r\n  /**\r\n  * Starts the delivery of recent pedestrian-related data to your Cordova app.\r\n  *\r\n  * When the app is suspended, the delivery of updates stops temporarily.\r\n  * Upon returning to foreground or background execution, the pedometer object begins updates again.\r\n  * @return {Observable<IPedometerData>} Returns a Observable that recieves repeatly data from pedometer in background.\r\n  */\r\n  @Cordova({\r\n    observable: true,\r\n    clearFunction: 'stopPedometerUpdates'\r\n  })\r\n  startPedometerUpdates(): Observable<IPedometerData> { return; }\r\n\r\n  /**\r\n   * Stops the delivery of recent pedestrian data updates to your Cordova app.\r\n   * @return {Promise<boolean>} Returns a promise that resolves when pedometer watching was stopped\r\n   */\r\n  @Cordova()\r\n  stopPedometerUpdates(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Retrieves the data between the specified start and end dates.\r\n   * The startDate and endDate options are required and can be constructed in any valid JavaScript way\r\n   * (e.g. new Date(2015, 4, 1, 15, 20, 00) is also valid, as is milliseconds).\r\n   * Only works on iOS.\r\n   * @param {any} options  start date and en date where you want to get pedometer data\r\n   * @return {Promise<IPedometerData>} Returns a promise that resolves when pedometer data found\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  queryData(options: { startDate: Date, endDate: Date }): Promise<IPedometerData> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}